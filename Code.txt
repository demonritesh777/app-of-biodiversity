/*********************Manifest.xml*************************/

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    package="com.example.uttarakhandbiodiversity">

    <application
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.UttarakhandBiodiversity"
        tools:targetApi="31">
        <activity
            android:name=".DetailsActivity"
            android:exported="true">

        </activity>
        <activity
            android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <meta-data
            android:name="preloaded_fonts"
            android:resource="@array/preloaded_fonts" />
    </application>

</manifest>






/*******************************Card Adapter*************************/


class CardAdapter(private val mList: List<cardModel>, var ApplicationContext: Context) :
    RecyclerView.Adapter<CardAdapter.ViewHolder>() {

    // create new views
    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {
        // inflates the card_view_design view
        // that is used to hold list item
        val view = LayoutInflater.from(parent.context)
            .inflate(R.layout.card_item, parent, false)
        return ViewHolder(view)
    }


    // return the number of the items in the list
    override fun getItemCount(): Int {
        return mList.size
    }

    // Holds the views for adding it to image and text
    class ViewHolder(ItemView: View) : RecyclerView.ViewHolder(ItemView) {
        val imageView: ImageView = itemView.findViewById(R.id.iv)
        val textView: TextView = itemView.findViewById(R.id.tv)
        val cardView: CardView = itemView.findViewById(R.id.card_view)
    }

    // binds the list items to a view
    override fun onBindViewHolder(holder: ViewHolder, position: Int) {
        var requestOptions = RequestOptions()
        requestOptions = requestOptions.transforms(CenterCrop(), RoundedCorners(16))

        val ItemsViewModel = mList[position]
        Glide.with(ApplicationContext)
            .load(ItemsViewModel.image)
            .centerCrop()
            .apply(requestOptions)
            .into(holder.imageView)

        holder.textView.text = ItemsViewModel.name
        holder.cardView.setOnClickListener {
            val intent  = Intent(it.context, DetailsActivity::class.java)
            intent.putExtra("name", ItemsViewModel.name)
            intent.putExtra("descp", ItemsViewModel.descp)
            intent.putExtra("image", ItemsViewModel.image)
            it.context.startActivity(intent)
        }
    }
}




/**************************Card Model**********************/

data class cardModel(
    var name : String,
    var descp : String,
    var image : String
)



/*********************************Data File**********************/


/**************************Detail Activity**********************/

class DetailsActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_details)

        val extras = intent.extras
        val name = extras?.getString("name")
        val descp = extras?.getString("descp")
        val image = extras?.getString("image")

        val head = findViewById<TextView>(R.id.head)
        val descpc = findViewById<TextView>(R.id.descp)
        val imagec = findViewById<ImageView>(R.id.image)
        head.text = name
        descpc.text = descp

        var requestOptions = RequestOptions()
        requestOptions = requestOptions.transforms(CenterCrop(), RoundedCorners(16))
        Glide.with(this)
            .load(image)
            .centerCrop()
            .apply(requestOptions)
            .into(imagec)

    }
}





/********************************Main Activity************************/


class MainActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)


//        Information Card -----------------------------------------
        val cardHeading = findViewById<TextView>(R.id.cardHead)
        val cardDescp = findViewById<TextView>(R.id.cardDescp)
        val cardImage = findViewById<ImageView>(R.id.cardImageInfo2)


        val handler = Handler()
        handler.postDelayed(object : Runnable {
            override fun run() {
                var requestOptions = RequestOptions()
                requestOptions = requestOptions.transforms(CenterCrop(), RoundedCorners(16))

                val randomArray  = listOf<cardModel>(flora.random(), fauna.random())
                val randomItem = randomArray.random()
                cardHeading.text = randomItem.name
                cardDescp.text = randomItem.descp
                Glide.with(applicationContext)
                    .load(randomItem.image)
                    .centerCrop()
                    .apply(requestOptions)
                    .into(cardImage)
                handler.postDelayed(this, 6000)//6 sec delay
            }
        }, 0)


//        -----------------------------------------------------------


        val card = findViewById<CardView>(R.id.cardView)
        card.setOnClickListener{
            Toast.makeText(applicationContext, "Will be implemented soon ...", Toast.LENGTH_SHORT).show()
        }


        val recyclerview = findViewById<RecyclerView>(R.id.recyclerview)
        recyclerview.layoutManager =
            LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false)
        val adapter = CardAdapter(flora, this)
        recyclerview.adapter = adapter

        val recyclerview2 = findViewById<RecyclerView>(R.id.recyclerview2)
        recyclerview2.layoutManager =
            LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false)
        val adapter2 = CardAdapter(fauna, this)
        recyclerview2.adapter = adapter2
    }
}